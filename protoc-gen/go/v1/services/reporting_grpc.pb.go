// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/services/reporting.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportingService_GenerateComplianceReport_FullMethodName = "/scg.v1.services.ReportingService/GenerateComplianceReport"
	ReportingService_GenerateAnnualReport_FullMethodName     = "/scg.v1.services.ReportingService/GenerateAnnualReport"
	ReportingService_GenerateMonthlyReport_FullMethodName    = "/scg.v1.services.ReportingService/GenerateMonthlyReport"
)

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportingService provides endpoints for generating compliance reports.
type ReportingServiceClient interface {
	// GenerateComplianceReport is the core flexible RPC for generating a report for any given date range.
	// The specific monthly/annual RPCs are convenience wrappers around this one.
	GenerateComplianceReport(ctx context.Context, in *GenerateComplianceReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error)
	// GenerateAnnualReport creates a report for a full calendar year.
	GenerateAnnualReport(ctx context.Context, in *GenerateAnnualReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error)
	// GenerateMonthlyReport creates a report for a specific month of a specific year.
	GenerateMonthlyReport(ctx context.Context, in *GenerateMonthlyReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error)
}

type reportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingServiceClient(cc grpc.ClientConnInterface) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) GenerateComplianceReport(ctx context.Context, in *GenerateComplianceReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateComplianceReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GenerateComplianceReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GenerateAnnualReport(ctx context.Context, in *GenerateAnnualReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateComplianceReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GenerateAnnualReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GenerateMonthlyReport(ctx context.Context, in *GenerateMonthlyReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateComplianceReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GenerateMonthlyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
// All implementations must embed UnimplementedReportingServiceServer
// for forward compatibility.
//
// ReportingService provides endpoints for generating compliance reports.
type ReportingServiceServer interface {
	// GenerateComplianceReport is the core flexible RPC for generating a report for any given date range.
	// The specific monthly/annual RPCs are convenience wrappers around this one.
	GenerateComplianceReport(context.Context, *GenerateComplianceReportRequest) (*GenerateComplianceReportResponse, error)
	// GenerateAnnualReport creates a report for a full calendar year.
	GenerateAnnualReport(context.Context, *GenerateAnnualReportRequest) (*GenerateComplianceReportResponse, error)
	// GenerateMonthlyReport creates a report for a specific month of a specific year.
	GenerateMonthlyReport(context.Context, *GenerateMonthlyReportRequest) (*GenerateComplianceReportResponse, error)
	mustEmbedUnimplementedReportingServiceServer()
}

// UnimplementedReportingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportingServiceServer struct{}

func (UnimplementedReportingServiceServer) GenerateComplianceReport(context.Context, *GenerateComplianceReportRequest) (*GenerateComplianceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateComplianceReport not implemented")
}
func (UnimplementedReportingServiceServer) GenerateAnnualReport(context.Context, *GenerateAnnualReportRequest) (*GenerateComplianceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAnnualReport not implemented")
}
func (UnimplementedReportingServiceServer) GenerateMonthlyReport(context.Context, *GenerateMonthlyReportRequest) (*GenerateComplianceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlyReport not implemented")
}
func (UnimplementedReportingServiceServer) mustEmbedUnimplementedReportingServiceServer() {}
func (UnimplementedReportingServiceServer) testEmbeddedByValue()                          {}

// UnsafeReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingServiceServer will
// result in compilation errors.
type UnsafeReportingServiceServer interface {
	mustEmbedUnimplementedReportingServiceServer()
}

func RegisterReportingServiceServer(s grpc.ServiceRegistrar, srv ReportingServiceServer) {
	// If the following call pancis, it indicates UnimplementedReportingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportingService_ServiceDesc, srv)
}

func _ReportingService_GenerateComplianceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateComplianceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GenerateComplianceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GenerateComplianceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GenerateComplianceReport(ctx, req.(*GenerateComplianceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GenerateAnnualReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAnnualReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GenerateAnnualReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GenerateAnnualReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GenerateAnnualReport(ctx, req.(*GenerateAnnualReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GenerateMonthlyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMonthlyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GenerateMonthlyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GenerateMonthlyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GenerateMonthlyReport(ctx, req.(*GenerateMonthlyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingService_ServiceDesc is the grpc.ServiceDesc for ReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scg.v1.services.ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateComplianceReport",
			Handler:    _ReportingService_GenerateComplianceReport_Handler,
		},
		{
			MethodName: "GenerateAnnualReport",
			Handler:    _ReportingService_GenerateAnnualReport_Handler,
		},
		{
			MethodName: "GenerateMonthlyReport",
			Handler:    _ReportingService_GenerateMonthlyReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/services/reporting.proto",
}
